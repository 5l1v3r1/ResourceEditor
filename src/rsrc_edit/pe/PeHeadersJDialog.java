/*

Copyright (C) 2013-2016, Securifera, Inc 

All rights reserved. 

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
	this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
	this list of conditions and the following disclaimer in the documentation 
	and/or other materials provided with the distribution.

    * Neither the name of Securifera, Inc nor the names of its contributors may be 
	used to endorse or promote products derived from this software without specific
	prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON 
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

================================================================================

The copyright on this package is held by Securifera, Inc

*/

/*
 * PeHeadersJDialog.java
 *
 */

package rsrc_edit.pe;

import java.awt.Cursor;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.channels.FileChannel;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import rsrc_edit.JDialogListener;
import rsrc_edit.MainJFrame;
import rsrc_edit.SavableListener;
import rsrc_edit.SavableTextField;
import rsrc_edit.StandardValidation;
import rsrc_edit.StringResourceJPanel;
import rsrc_edit.ValidTextField;
import rsrc_edit.settings.*;

/**
 *
 *  
 */
public class PeHeadersJDialog extends JDialog implements SavableListener {
    
    private final JDialogListener theListener;
    private static final String NAME_Class = PeHeadersJDialog.class.getSimpleName();
 
    //=======================================================================
    /** Creates new form SettingsJDialog
     * @param parent
     * @param modal */
    public PeHeadersJDialog( JDialogListener parent, boolean modal ) {
       super( parent.getParentJFrame() , modal);
       
       theListener = parent;
     
       initComponents();
       initializeComponents();
       setLocationRelativeTo(null);

    }//End Constructor

     //=======================================================================
    /**
     * Initializes all the components
    */
    private void initializeComponents(){
        
         
        ((ValidTextField)imageBaseValue).setValidation(StandardValidation.KEYWORD_DECIMAL_OR_HEX);
        MainJFrame parentFrame = theListener.getParentJFrame();
        if( parentFrame != null ){
            NtHeader theNtHeader = parentFrame.getNtHeader();
            if( theNtHeader != null ){
                ImageOptionalHeader optHeader = theNtHeader.OptionalHeader;
                long imageBase = optHeader.getImageBase();
                imageBaseValue.setText("0x"+Long.toHexString(imageBase));     
            }   
        }
              
    }

    /**
    * Sets the save button enablement
     * @param passedBool
    */
    public void setSaveButton(boolean passedBool){
        if(passedBool)
            saveOrOkJButton.setText("Save");
        else {
            saveOrOkJButton.setText("OK");
            ((SavableTextField)imageBaseValue).reset();
        }
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        encodingButtonGroup = new javax.swing.ButtonGroup();
        cancelJButton = new javax.swing.JButton();
        saveOrOkJButton = new javax.swing.JButton();
        encodingPanel = new javax.swing.JPanel();
        ntHeaderPanel = new javax.swing.JPanel();
        imageBaseValue = new SavableTextField( this );
        imageBaseLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Options");
        setModal(true);
        setName("Options"); // NOI18N

        cancelJButton.setText("Cancel");
        cancelJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelJButtonActionPerformed(evt);
            }
        });

        saveOrOkJButton.setText("OK");
        saveOrOkJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveOrOkJButtonActionPerformed(evt);
            }
        });

        encodingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("DOS Header"));

        javax.swing.GroupLayout encodingPanelLayout = new javax.swing.GroupLayout(encodingPanel);
        encodingPanel.setLayout(encodingPanelLayout);
        encodingPanelLayout.setHorizontalGroup(
            encodingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 378, Short.MAX_VALUE)
        );
        encodingPanelLayout.setVerticalGroup(
            encodingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 131, Short.MAX_VALUE)
        );

        ntHeaderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("NT Header"));

        imageBaseValue.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        imageBaseLabel.setText("Image Base:");

        javax.swing.GroupLayout ntHeaderPanelLayout = new javax.swing.GroupLayout(ntHeaderPanel);
        ntHeaderPanel.setLayout(ntHeaderPanelLayout);
        ntHeaderPanelLayout.setHorizontalGroup(
            ntHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ntHeaderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imageBaseLabel)
                .addGap(18, 18, 18)
                .addComponent(imageBaseValue, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ntHeaderPanelLayout.setVerticalGroup(
            ntHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ntHeaderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ntHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imageBaseValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imageBaseLabel))
                .addContainerGap(100, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 258, Short.MAX_VALUE)
                        .addComponent(saveOrOkJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(cancelJButton))
                    .addComponent(encodingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ntHeaderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(encodingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ntHeaderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveOrOkJButton)
                    .addComponent(cancelJButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   private void cancelJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelJButtonActionPerformed
       closeDialog();
   }//GEN-LAST:event_cancelJButtonActionPerformed

   private void saveOrOkJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveOrOkJButtonActionPerformed

        String buttonText = saveOrOkJButton.getText();

        if(buttonText.equals("Save")){
            
            setCursor( Cursor.getPredefinedCursor( Cursor.WAIT_CURSOR ) );
            
            MainJFrame parentFrame = theListener.getParentJFrame();
            if( parentFrame != null ){
                saveHeaderData(parentFrame);               
            }
                        
            try {
                setSaveButton(false);
            } finally {
                setCursor(null);
            }

        } else
            closeDialog();
        
   }//GEN-LAST:event_saveOrOkJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelJButton;
    private javax.swing.ButtonGroup encodingButtonGroup;
    private javax.swing.JPanel encodingPanel;
    private javax.swing.JLabel imageBaseLabel;
    private javax.swing.JTextField imageBaseValue;
    private javax.swing.JPanel ntHeaderPanel;
    private javax.swing.JButton saveOrOkJButton;
    // End of variables declaration//GEN-END:variables

    //========================================================================
    /**
     * Get the listener
     * @return 
     */
    public JDialogListener getDialogListener() {
        return theListener;
    }

    // ==========================================================================
    /**
    * Processes {@link WindowEvent}s occurring on this component.
    * <p>
    * This method is overridden to handle unsaved changes when the window is closed
    * using the X(exit) button and give the user the option of cancelling the close.
    *
    * @param event the {@code WindowEvent}
    */
    @Override //Overrides JFrame.processWindowEvent( WindowEvent )
    protected void processWindowEvent( WindowEvent event ) {

        if( WindowEvent.WINDOW_CLOSING == event.getID() )
            closeDialog();            
        else
            super.processWindowEvent( event );

    }
    
    // ==========================================================================
    /**
    *   Handles the logic necessary before the dialog is closed
    */
    private void closeDialog() {
        dispose();
    }

    // ==========================================================================
    /**
     * 
     */
    @Override
    public void savableValueChanged() {
        setSaveButton(true);
    }

    // ==========================================================================
    /**
     * 
     */
    private void saveHeaderData( MainJFrame passedFrame  ) {
                    
        //Get image base value
        if( ((SavableTextField)imageBaseValue).isDirty() ){
            
            //Get the image base address
            String userString = imageBaseValue.getText();
            long imageBase = Long.decode(userString);

            //Get offset in file to write to
            NtHeader theNtHeader = passedFrame.getNtHeader();
            if( theNtHeader != null ){   

                //Get offset of image base
                int fileOffset = theNtHeader.getFileOffset();
                fileOffset += 4; //PE Signature
                fileOffset += ImageFileHeader.IMAGE_FILE_HEADER_SIZE;
                fileOffset += ImageOptionalHeader.BASE_HEADER_SIZE;

                ByteBuffer buf;
                ImageOptionalHeader theOptHeader = theNtHeader.OptionalHeader;
                if( theOptHeader instanceof ImageOptionalHeader32 ){
                    fileOffset += 4; //BaseofData
                    
                    buf = ByteBuffer.allocate(Integer.SIZE/Byte.SIZE);
                    buf.order(ByteOrder.LITTLE_ENDIAN);  
                    buf.putInt((int) imageBase);
                    
                } else {
                    buf = ByteBuffer.allocate(Long.SIZE/Byte.SIZE);
                    buf.order(ByteOrder.LITTLE_ENDIAN);
                    buf.putLong(imageBase);
                }
                     
                //Write to the file
                buf.flip();
                writeToFile(buf, fileOffset);
               
            }
        }   
        
    }
    
    //=========================================================================
    /**
     * 
     * @param aBB
     * @param position 
     */
    public void writeToFile( ByteBuffer aBB, long position ){
        
        File binFile = theListener.getParentJFrame().getLoadedFile();
        if( binFile != null ){
            theListener.getParentJFrame();
            
            //Open file and write
            FileOutputStream aFOS;
            FileChannel currentBinaryFileChannel = null;    
            try { 
                //Open file
                aFOS = new FileOutputStream(binFile, true);
                currentBinaryFileChannel = aFOS.getChannel();

                //Write to the file
                currentBinaryFileChannel.write(aBB, position);
                currentBinaryFileChannel.force(true);

            } catch (IOException ex) {
                Logger.getLogger(StringResourceJPanel.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    if(currentBinaryFileChannel != null )
                        currentBinaryFileChannel.close();
                } catch (IOException ex) {
                }
            }
        }
        
    }

}
