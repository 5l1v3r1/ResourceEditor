/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rsrc_edit;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import rsrc_edit.resource.ResourceDataEntry;

/**
 *
 * @author user
 */
public class StringResourceJPanel extends javax.swing.JPanel {

    private final ResourceController theResourceController;
  
    /**
     * Creates new form StringResourceJPanel
     * @param passedController
     */
    public StringResourceJPanel( ResourceController passedController ) {
        initComponents();
        theResourceController = passedController;
        initializeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        valueJTextField = new javax.swing.JTextField();
        valueJLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        valueJLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        valueJLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        valueJLabel.setLabelFor(valueJTextField);
        valueJLabel.setText("< Undefined - Edit->String Map >");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveButton))
                    .addComponent(valueJTextField)
                    .addComponent(jSeparator1)
                    .addComponent(valueJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(valueJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(valueJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(saveButton)
                .addContainerGap(49, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        File binFile = theResourceController.getParentFrame().getLoadedFile();
        if( binFile != null ){
            
            ResourceDataEntry aRDE = theResourceController.getObject();
            //Don't count the string size and id fields
            int availSpace = (int) (aRDE.Size);
            
            FileOutputStream aFOS = null;
            FileChannel currentBinaryFileChannel = null;
            try {                
                //Open file
                aFOS = new FileOutputStream(binFile, true);
                currentBinaryFileChannel = aFOS.getChannel();
                
                String userString = valueJTextField.getText();
                if( userString.length() > 0 ){
                    byte[] strBytes = userString.getBytes("UTF-16LE");
                    strBytes = Arrays.copyOf(strBytes, availSpace);
                    ByteBuffer aBB = ByteBuffer.wrap(strBytes);
                    currentBinaryFileChannel.write(aBB, aRDE.DataVirtualAddr + 2);
                }               
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(StringResourceJPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(StringResourceJPanel.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    currentBinaryFileChannel.close();
                } catch (IOException ex) {
                }
            }
            
        }
    }//GEN-LAST:event_saveButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel valueJLabel;
    private javax.swing.JTextField valueJTextField;
    // End of variables declaration//GEN-END:variables

    private void initializeComponents() {
        String idStr = theResourceController.toString();
        String actualStr = Constants.ID_STRING_MAP.get(idStr);
        if( actualStr != null ){
            valueJLabel.setText(actualStr);
        }
        
        try {
            ResourceDataEntry aRDE =  theResourceController.getObject();
            if( aRDE.data[0] != 0x0 || aRDE.data[1] != 0x0){
                String data = new String( Arrays.copyOfRange(aRDE.data, 0, aRDE.data.length - 8), "UTF-16LE").trim();
                valueJTextField.setText(data);
            }
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(StringResourceJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
